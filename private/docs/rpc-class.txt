

export class RpcWorkerPool implements WorkerPool, WorkerPoolRpc {
  private size: number;
  private strategy: Strategies;
  private verbosity: boolean;
  private rr_index: number;
  private next_job_ref: number;
  private workers: {
    worker: Worker;
    in_flight_commands: Map<number, any>;
    employee_number: number;
  }[];
  constructor(
    pathURI: string,
    size: number = 0,
    strategy: Strategies = strategies.leastbusy,
    verbosity = false
  ) {
    this.size = size < 0 ? Math.max(CORES + size, 1) : size || CORES;
    this.strategy = supportedStrategies.has(strategy)
      ? strategy
      : strategies.leastbusy;
    this.verbosity = verbosity;

    this.rr_index = -1;
    this.next_job_ref = 0;
    this.workers = [];
    for (
      let employee_number = 0;
      employee_number < this.size;
      employee_number++
    ) {
      // HACK: This is a hack to work around the fact that the Worker constructor does not support ts_node
      const worker = new Worker(
        `
  require('ts-node/register');
  require(require('worker_threads').workerData.runThisFileInTheWorker);
`,
        {
          eval: true,
          workerData: {
            runThisFileInTheWorker: pathURI,
            workerAsset: employee_number,
          },
        }
      );
      this.workers.push({
        worker,
        in_flight_commands: new Map(),
        employee_number,
      });

      worker.on('message', (msg: RpcResponse<unknown>) => {
        this.onMessageHandler(msg, employee_number);
      });
    }
  }
  async execRpc<O = unknown>(
    rpcRequest: RpcRequest<string[]>
  ): Promise<RpcResponse<O, unknown>> {
    return this.exec(
      rpcRequest.method,
      Number(rpcRequest.id),
      ...(rpcRequest.params || [])
    );
  }

  async exec<O = unknown>(
    command_name: string,
    external_message_identifier: number,
    ...args: string[]
  ): Promise<O> {
    const internal_job_ref = this.next_job_ref++;

    // The external_message_identifier is provided for feedback purpose only.
    const employee = this.getWorker();
    const promise = new Promise<O>((resolve, reject) => {
      employee.in_flight_commands.set(internal_job_ref, {
        resolve,
        reject,
        external_message_identifier,
      });
    });
    const rpcRequest: RpcRequest<{}> = {
      jsonrpc: '2.0',
      id: Number(internal_job_ref),
      method: command_name,
      params: [
        {
          external_message_identifier,
          employee_number: employee.employee_number,
          internal_job_ref,
        },
        ...args,
      ],
    };
    employee.worker.postMessage(rpcRequest);
    return promise;
  }
  private getWorker(log_message_id = -1): {
    worker: Worker;
    in_flight_commands: Map<number, any>;
    employee_number: number;
  } {
    let employee_number: number = 0;
    switch (this.strategy) {
      case 'random':
        employee_number = Math.floor(Math.random() * this.size);
        break;
      case 'roundrobin':
        this.rr_index++;
        if (this.rr_index >= this.size) this.rr_index = 0;
        employee_number = this.rr_index;
        break;
      case 'leastbusy':
      default:
        let min = Infinity;
        for (let i = 0; i < this.size; i++) {
          let worker = this.workers[i];
          if (worker.in_flight_commands.size < min) {
            min = worker.in_flight_commands.size;
            employee_number = 0;
          }
        }
    }
    this.verbosity &&
      console.log(
        `Worker: ${employee_number + 1} Message id: ${log_message_id || 0}`
      );

    return this.workers[employee_number];
  }
  private onMessageHandler(
    msg: RpcResponse<any>,
    employee_number: number
  ): void {
    const worker = this.workers[employee_number];

    const internal_job_ref = Number(msg.id);

    const internal_job = worker.in_flight_commands.get(internal_job_ref);

    if (!internal_job) {
      console.error(
        `No in-flight command found for job ref: ${internal_job_ref}`
      );
      return;
    }
    const { resolve, reject, external_message_identifier } = internal_job;
    worker.in_flight_commands.delete(internal_job_ref);
    const result: unknown = msg?.result ?? null;
    const error: RpcResponseError<any> | null = msg?.error || null;
    if (!error && result != null) {
      this.handleResult(resolve, result, external_message_identifier);
    } else {
      this.handleError(reject, error);
    }
  }
  private handleResult(
    resolve: (value: unknown) => void,
    result: unknown,
    external_message_identifier: number | string
  ): void {
    resolve(baseRpcResponseRight(result)(external_message_identifier));
  }
  private handleError(
    reject: (reason?: any) => void,
    error: RpcResponseError<any> | null
  ): void {
    reject(error);
  }

  get verbose(): boolean {
    return this.verbosity;
  }
  set verbose(VERBOSE: boolean) {
    this.verbosity = VERBOSE;
  }
}
